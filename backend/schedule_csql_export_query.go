// generated by qbg -type ScheduleCloudSQLExport -usedatastorewrapper -output schedule_csql_export_query.go; DO NOT EDIT

package backend

import (
	"go.mercari.io/datastore"
)

// Plugin supply hook point for query constructions.
type Plugin interface {
	Init(typeName string)
	Ancestor(ancestor datastore.Key)
	KeysOnly()
	Start(cur datastore.Cursor)
	Offset(offset int)
	Limit(limit int)
	Filter(name, op string, value interface{})
	Asc(name string)
	Desc(name string)
}

// Plugger supply Plugin component.
type Plugger interface {
	Plugin() Plugin
}

// ScheduleCloudSQLExportQueryBuilder build query for ScheduleCloudSQLExport.
type ScheduleCloudSQLExportQueryBuilder struct {
	q             datastore.Query
	plugin        Plugin
	ProjectID     *ScheduleCloudSQLExportQueryProperty
	Databases     *ScheduleCloudSQLExportQueryProperty
	SQLBucket     *ScheduleCloudSQLExportQueryProperty
	SQLObject     *ScheduleCloudSQLExportQueryProperty
	ExportURI     *ScheduleCloudSQLExportQueryProperty
	CreatedAt     *ScheduleCloudSQLExportQueryProperty
	UpdatedAt     *ScheduleCloudSQLExportQueryProperty
	SchemaVersion *ScheduleCloudSQLExportQueryProperty
}

// ScheduleCloudSQLExportQueryProperty has property information for ScheduleCloudSQLExportQueryBuilder.
type ScheduleCloudSQLExportQueryProperty struct {
	bldr *ScheduleCloudSQLExportQueryBuilder
	name string
}

// NewScheduleCloudSQLExportQueryBuilder create new ScheduleCloudSQLExportQueryBuilder.
func NewScheduleCloudSQLExportQueryBuilder(client datastore.Client) *ScheduleCloudSQLExportQueryBuilder {
	return NewScheduleCloudSQLExportQueryBuilderWithKind(client, "ScheduleCloudSQLExport")
}

// NewScheduleCloudSQLExportQueryBuilderWithKind create new ScheduleCloudSQLExportQueryBuilder with specific kind.
func NewScheduleCloudSQLExportQueryBuilderWithKind(client datastore.Client, kind string) *ScheduleCloudSQLExportQueryBuilder {
	q := client.NewQuery(kind)
	bldr := &ScheduleCloudSQLExportQueryBuilder{q: q}
	bldr.ProjectID = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "ProjectID",
	}
	bldr.Databases = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "Databases",
	}
	bldr.SQLBucket = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "SQLBucket",
	}
	bldr.SQLObject = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "SQLObject",
	}
	bldr.ExportURI = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "ExportURI",
	}
	bldr.CreatedAt = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "CreatedAt",
	}
	bldr.UpdatedAt = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "UpdatedAt",
	}
	bldr.SchemaVersion = &ScheduleCloudSQLExportQueryProperty{
		bldr: bldr,
		name: "SchemaVersion",
	}

	if plugger, ok := interface{}(bldr).(Plugger); ok {
		bldr.plugin = plugger.Plugin()
		bldr.plugin.Init("ScheduleCloudSQLExport")
	}

	return bldr
}

// Ancestor sets parent key to ancestor query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) Ancestor(parentKey datastore.Key) *ScheduleCloudSQLExportQueryBuilder {
	bldr.q = bldr.q.Ancestor(parentKey)
	if bldr.plugin != nil {
		bldr.plugin.Ancestor(parentKey)
	}
	return bldr
}

// KeysOnly sets keys only option to query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) KeysOnly() *ScheduleCloudSQLExportQueryBuilder {
	bldr.q = bldr.q.KeysOnly()
	if bldr.plugin != nil {
		bldr.plugin.KeysOnly()
	}
	return bldr
}

// Start setup to query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) Start(cur datastore.Cursor) *ScheduleCloudSQLExportQueryBuilder {
	bldr.q = bldr.q.Start(cur)
	if bldr.plugin != nil {
		bldr.plugin.Start(cur)
	}
	return bldr
}

// Offset setup to query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) Offset(offset int) *ScheduleCloudSQLExportQueryBuilder {
	bldr.q = bldr.q.Offset(offset)
	if bldr.plugin != nil {
		bldr.plugin.Offset(offset)
	}
	return bldr
}

// Limit setup to query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) Limit(limit int) *ScheduleCloudSQLExportQueryBuilder {
	bldr.q = bldr.q.Limit(limit)
	if bldr.plugin != nil {
		bldr.plugin.Limit(limit)
	}
	return bldr
}

// Query returns *datastore.Query.
func (bldr *ScheduleCloudSQLExportQueryBuilder) Query() datastore.Query {
	return bldr.q
}

// Filter with op & value.
func (p *ScheduleCloudSQLExportQueryProperty) Filter(op string, value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	switch op {
	case "<=":
		p.LessThanOrEqual(value)
	case ">=":
		p.GreaterThanOrEqual(value)
	case "<":
		p.LessThan(value)
	case ">":
		p.GreaterThan(value)
	case "=":
		p.Equal(value)
	default:
		p.bldr.q = p.bldr.q.Filter(p.name+" "+op, value) // error raised by native query
	}
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, op, value)
	}
	return p.bldr
}

// LessThanOrEqual filter with value.
func (p *ScheduleCloudSQLExportQueryProperty) LessThanOrEqual(value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<=", value)
	}
	return p.bldr
}

// GreaterThanOrEqual filter with value.
func (p *ScheduleCloudSQLExportQueryProperty) GreaterThanOrEqual(value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >=", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">=", value)
	}
	return p.bldr
}

// LessThan filter with value.
func (p *ScheduleCloudSQLExportQueryProperty) LessThan(value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" <", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "<", value)
	}
	return p.bldr
}

// GreaterThan filter with value.
func (p *ScheduleCloudSQLExportQueryProperty) GreaterThan(value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" >", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, ">", value)
	}
	return p.bldr
}

// Equal filter with value.
func (p *ScheduleCloudSQLExportQueryProperty) Equal(value interface{}) *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Filter(p.name+" =", value)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Filter(p.name, "=", value)
	}
	return p.bldr
}

// Asc order.
func (p *ScheduleCloudSQLExportQueryProperty) Asc() *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Order(p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Asc(p.name)
	}
	return p.bldr
}

// Desc order.
func (p *ScheduleCloudSQLExportQueryProperty) Desc() *ScheduleCloudSQLExportQueryBuilder {
	p.bldr.q = p.bldr.q.Order("-" + p.name)
	if p.bldr.plugin != nil {
		p.bldr.plugin.Desc(p.name)
	}
	return p.bldr
}
